<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- DBCP连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="defaultAutoCommit" value="false" />
        <property name="filters" value="config" />
        <property name="connectionProperties" value="config.decrypt=true" />
    </bean>

    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描模型对象目录, 省掉Configuration.xml里的手工配置, 改为明确的控制
        <property name="typeAliasesPackage" value="com.xniu.xxx.contract" /> -->
        <!-- 指定Mapper文件位置 -->
        <property name="mapperLocations" value="classpath:/mapper/*/*.xml" />
        <!--配置sessionFactory,需要加入datasource,这里的datasource引用上面配置好的dataSource.同时将mybatis-setting.xml加入管理。
        SessionFactory不需要手动去创建，而在服务器启动时，自动启动，所有的Transaction及相关操作都是依赖于这个已启动的SessionFactory-->
        <property name="configLocation"  value="classpath:/mybatis_setting.xml" />
        <property name="configurationProperties">
            <props>
                <prop key="mapUnderscoreToCamelCase">true</prop>
                <prop key="aggressiveLazyLoading">false</prop>
                <prop key="cacheEnabled">true</prop>
                <prop key="useColumnLabel">true</prop>
                <!--<prop key="useGeneratedKeys">true</prop>-->
            </props>
        </property>
    </bean>

    <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.alibaba.tutorial1.modules.*.dal" />
        <property name="annotationClass" value="com.alibaba.framework.annotation.MyBatisRepository"/>
    </bean>

    <!--  TransactionManager定义。这里将dataSource加入Transaction,
            在应用中，可以采用@transaction的方式自动开启事务和关闭事务      -->

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

    <bean id="dbPropertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1" />
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="locations">
            <list>
                <value>classpath*:/jdbc.properties</value>
            </list>
        </property>
    </bean>

    <bean id="springContext"  class="com.alibaba.framework.util.SpringContext" />


</beans>
